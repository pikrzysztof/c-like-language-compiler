-- Programs ------------------------------------------------
entrypoints Program ;
Prgm.   Program  ::= [TopDef] ;
FnDef.	   TopDef   ::= Type Ident "(" [Arg] ")" Block ;
separator  nonempty TopDef "" ;
Argument.  Arg      ::= Type Ident ;
separator  Arg "," ;
ClsDef.    TopDef   ::= "class" Ident "{" [ClsBowel] "}" ;
ClsExtDef. TopDef   ::= "class" Ident "extends" Ident "{" [ClsBowel] "}" ;

-- MethodBowels --------------------------------------------
MemberDef. ClsBowel ::= Type [Ident] ";" ;
MethodDef. ClsBowel ::= Type Ident "(" [Arg] ")" Block ;
separator  ClsBowel  "" ;

separator Ident "," ;

-- Statements ----------------------------------------------
Blk.       Block ::= "{" [Stmt] "}" ;
separator  Stmt "" ;
Empty.     Stmt ::= ";" ;
BStmt.     Stmt ::= Block ;
Decl.      Stmt ::= Type [Item] ";" ;

NoInit.    Item ::= Ident ;
Init.      Item ::= Ident "=" Expr ;

separator  nonempty Item "," ;
Ass.       Stmt ::= LValue "=" Expr  ";" ;

Incr.      Stmt ::= LValue "++"  ";" ;
Decr.      Stmt ::= LValue "--"  ";" ;
Ret.       Stmt ::= "return" Expr ";" ;
VRet.      Stmt ::= "return" ";" ;
Cond.      Stmt ::= "if" "(" Expr ")" Stmt ;
CondElse.  Stmt ::= "if" "(" Expr ")" Stmt "else" Stmt ;
While.     Stmt ::= "while" "(" Expr ")" Stmt ;
SExp.      Stmt ::= Expr  ";" ;

-- Types ---------------------------------------------------
Int.       Type ::= "int" ;
Str.       Type ::= "string" ;
Bool.      Type ::= "boolean" ;
IdentType. Type ::= Ident ;
ArrType.   Type ::= Type "[]";
--ArrTypeWLen. Type ::= Type "[" Expr "]";
Void.      Type ::= "void" ;
internal   Fun. Type ::= Type "(" [Type] ")" ;
separator  Type "," ;

-- Expressions ---------------------------------------------
LVIdent.   LValue ::= Ident;
LVMember.  LValue ::= Expr6 "." Ident;
LVArrItem. LValue ::= Expr6 "[" Expr "]";

ECast.     Expr6 ::= "(" Ident ")null";
ELValue.    Expr6 ::= LValue;
-- EVar.      Expr6 ::= Ident;
--EMember.   Expr5 ::= Expr5 "." Ident;
EConstr.   Expr6 ::= "new" Type ;
-- EArrConstr. Expr6 ::= "new" Type "[" Expr "]";
ELitInt.   Expr6 ::= Integer ;
ELitTrue.  Expr6 ::= "true" ;
ELitFalse. Expr6 ::= "false" ;
EMethApp.  Expr5 ::= Expr6 "." Ident "(" [Expr] ")" ;
EApp.      Expr6 ::= Ident "(" [Expr] ")" ;
EString.   Expr6 ::= String ;
Neg.       Expr5 ::= "-" Expr6 ;
Not.       Expr5 ::= "!" Expr6 ;
EMul.      Expr4 ::= Expr4 MulOp Expr5 ;
EAdd.      Expr3 ::= Expr3 AddOp Expr4 ;
ERel.      Expr2 ::= Expr2 RelOp Expr3 ;
EAnd.      Expr1 ::= Expr2 "&&" Expr1 ;
EOr.       Expr  ::= Expr1 "||" Expr ;


internal TECast.     Expr6 ::= "{" Type "}" "(" Ident ")null" ;
internal TELValue.   Expr6 ::= "{" Type "}" LValue;
internal TEConstr.   Expr6 ::= "{" Type "}" "new" Type ;
--internal TEArrConstr. Expr6 ::= "{" Type "}" "new" Type "[" Expr "]";
internal TELitInt.   Expr6 ::= "{" Type "}" Integer ;
internal TELitTrue.  Expr6 ::= "{" Type "}" "true" ;
internal TELitFalse. Expr6 ::= "{" Type "}" "false" ;
internal TEMethApp.  Expr5 ::= "{" Type "}" Expr5 "." Ident "(" [Expr] ")" ;
internal TEApp.      Expr6 ::= "{" Type "}" Ident "(" [Expr] ")" ;
internal TEString.   Expr6 ::= "{" Type "}" String ;
internal TNeg.       Expr5 ::= "{" Type "}" "-" Expr6 ;
internal TNot.       Expr5 ::= "{" Type "}" "!" Expr6 ;
internal TEMul.      Expr4 ::= "{" Type "}" Expr4 MulOp Expr5 ;
internal TEAdd.      Expr3 ::= "{" Type "}" Expr3 AddOp Expr4 ;
internal TERel.      Expr2 ::= "{" Type "}" Expr2 RelOp Expr3 ;
internal TEAnd.      Expr1 ::= "{" Type "}" Expr2 "&&" Expr1 ;
internal TEOr.       Expr  ::= "{" Type "}" Expr1 "||" Expr ;

coercions  Expr 6 ;
separator  Expr "," ;

-- Operators -----------------------------------------------
Plus.      AddOp ::= "+" ;
Minus.     AddOp ::= "-" ;
Times.     MulOp ::= "*" ;
Div.       MulOp ::= "/" ;
Mod.       MulOp ::= "%" ;
LTH.       RelOp ::= "<" ;
LE.        RelOp ::= "<=" ;
GTH.       RelOp ::= ">" ;
GE.        RelOp ::= ">=" ;
EQU.       RelOp ::= "==" ;
NE.        RelOp ::= "!=" ;

-- Comments ------------------------------------------------
comment    "#" ;
comment    "//" ;
comment    "/*" "*/" ;
