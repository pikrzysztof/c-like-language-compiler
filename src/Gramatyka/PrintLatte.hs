{-# OPTIONS_GHC -w #-}
{-# LANGUAGE GADTs, TypeSynonymInstances, FlexibleInstances #-}
module Gramatyka.PrintLatte where

-- pretty-printer generated by the BNF converter

import Gramatyka.AbsLatte
import Data.Char
import Data.List (intersperse)

-- the top-level printing method
printTree :: Print a => a -> String
printTree = render . prt 0

type Doc = [ShowS] -> [ShowS]

doc :: ShowS -> Doc
doc = (:)

render :: Doc -> String
render d = rend 0 (map ($ "") $ d []) "" where
  rend i ss = case ss of
    "["      :ts -> showChar '[' . rend i ts
    "("      :ts -> showChar '(' . rend i ts
    "{"      :ts -> showChar '{' . new (i+1) . rend (i+1) ts
    "}" : ";":ts -> new (i-1) . space "}" . showChar ';' . new (i-1) . rend (i-1) ts
    "}"      :ts -> new (i-1) . showChar '}' . new (i-1) . rend (i-1) ts
    ";"      :ts -> showChar ';' . new i . rend i ts
    t  : "," :ts -> showString t . space "," . rend i ts
    t  : ")" :ts -> showString t . showChar ')' . rend i ts
    t  : "]" :ts -> showString t . showChar ']' . rend i ts
    t        :ts -> space t . rend i ts
    _            -> id
  new i   = showChar '\n' . replicateS (2*i) (showChar ' ') . dropWhile isSpace
  space t = showString t . (\s -> if null s then "" else (' ':s))

parenth :: Doc -> Doc
parenth ss = doc (showChar '(') . ss . doc (showChar ')')

concatS :: [ShowS] -> ShowS
concatS = foldr (.) id

concatD :: [Doc] -> Doc
concatD = foldr (.) id

unwordsD :: [Doc] -> Doc
unwordsD = concatD . intersperse (doc (showChar ' '))

replicateS :: Int -> ShowS -> ShowS
replicateS n f = concatS (replicate n f)

-- the printer class does the job
class Print a where
  prt :: Int -> a -> Doc

instance Print Char where
  prt _ s = doc (showChar '\'' . mkEsc '\'' s . showChar '\'')

instance Print String where
  prt _ s = doc (showChar '"' . concatS (map (mkEsc '"') s) . showChar '"')

mkEsc :: Char -> Char -> ShowS
mkEsc q s = case s of
  _ | s == q -> showChar '\\' . showChar s
  '\\'-> showString "\\\\"
  '\n' -> showString "\\n"
  '\t' -> showString "\\t"
  _ -> showChar s

prPrec :: Int -> Int -> Doc -> Doc
prPrec i j = if j<i then parenth else id


instance Print Integer where
  prt _ x = doc (shows x)


instance Print Double where
  prt _ x = doc (shows x)


instance Print (Tree c) where
  prt _i e = case e of
    Prgm topdefs -> prPrec _i 0 (concatD [prt 0 topdefs])
    FnDef type' i args block -> prPrec _i 0 (concatD [prt 0 type' , prt 0 i , doc (showString "(") , prt 0 args , doc (showString ")") , prt 0 block])
    ClsDef i clsbowels -> prPrec _i 0 (concatD [doc (showString "class") , prt 0 i , doc (showString "{") , prt 0 clsbowels , doc (showString "}")])
    ClsExtDef i0 i1 clsbowels2 -> prPrec _i 0 (concatD [doc (showString "class") , prt 0 i0 , doc (showString "extends") , prt 0 i1 , doc (showString "{") , prt 0 clsbowels2 , doc (showString "}")])
    Argument type' i -> prPrec _i 0 (concatD [prt 0 type' , prt 0 i])
    MemberDef type' is -> prPrec _i 0 (concatD [prt 0 type' , prt 0 is , doc (showString ";")])
    MethodDef type' i args block -> prPrec _i 0 (concatD [prt 0 type' , prt 0 i , doc (showString "(") , prt 0 args , doc (showString ")") , prt 0 block])
    Blk stmts -> prPrec _i 0 (concatD [doc (showString "{") , prt 0 stmts , doc (showString "}")])
    Empty  -> prPrec _i 0 (concatD [doc (showString ";")])
    BStmt block -> prPrec _i 0 (concatD [prt 0 block])
    Decl type' items -> prPrec _i 0 (concatD [prt 0 type' , prt 0 items , doc (showString ";")])
    Ass expr0 expr1 -> prPrec _i 0 (concatD [prt 0 expr0 , doc (showString "=") , prt 0 expr1 , doc (showString ";")])
    Incr expr -> prPrec _i 0 (concatD [prt 0 expr , doc (showString "++") , doc (showString ";")])
    Decr expr -> prPrec _i 0 (concatD [prt 0 expr , doc (showString "--") , doc (showString ";")])
    Ret expr -> prPrec _i 0 (concatD [doc (showString "return") , prt 0 expr , doc (showString ";")])
    VRet  -> prPrec _i 0 (concatD [doc (showString "return") , doc (showString ";")])
    Cond expr stmt -> prPrec _i 0 (concatD [doc (showString "if") , doc (showString "(") , prt 0 expr , doc (showString ")") , prt 0 stmt])
    CondElse expr stmt0 stmt1 -> prPrec _i 0 (concatD [doc (showString "if") , doc (showString "(") , prt 0 expr , doc (showString ")") , prt 0 stmt0 , doc (showString "else") , prt 0 stmt1])
    While expr stmt -> prPrec _i 0 (concatD [doc (showString "while") , doc (showString "(") , prt 0 expr , doc (showString ")") , prt 0 stmt])
    SExp expr -> prPrec _i 0 (concatD [prt 0 expr , doc (showString ";")])
    NoInit i -> prPrec _i 0 (concatD [prt 0 i])
    Init i expr -> prPrec _i 0 (concatD [prt 0 i , doc (showString "=") , prt 0 expr])
    Int  -> prPrec _i 0 (concatD [doc (showString "int")])
    Str  -> prPrec _i 0 (concatD [doc (showString "string")])
    Bool  -> prPrec _i 0 (concatD [doc (showString "boolean")])
    IdentType i -> prPrec _i 0 (concatD [prt 0 i])
    Void  -> prPrec _i 0 (concatD [doc (showString "void")])
    Fun type' types -> prPrec _i 0 (concatD [prt 0 type' , doc (showString "(") , prt 0 types , doc (showString ")")])
    ECast i -> prPrec _i 6 (concatD [doc (showString "(") , prt 0 i , doc (showString ")null")])
    EVar i -> prPrec _i 6 (concatD [prt 0 i])
    EMember expr i -> prPrec _i 5 (concatD [prt 5 expr , doc (showString ".") , prt 0 i])
    EConstr i -> prPrec _i 6 (concatD [doc (showString "new") , prt 0 i])
    ELitInt n -> prPrec _i 6 (concatD [prt 0 n])
    ELitTrue  -> prPrec _i 6 (concatD [doc (showString "true")])
    ELitFalse  -> prPrec _i 6 (concatD [doc (showString "false")])
    EMethApp expr i exprs -> prPrec _i 5 (concatD [prt 5 expr , doc (showString ".") , prt 0 i , doc (showString "(") , prt 0 exprs , doc (showString ")")])
    EApp i exprs -> prPrec _i 6 (concatD [prt 0 i , doc (showString "(") , prt 0 exprs , doc (showString ")")])
    EString str -> prPrec _i 6 (concatD [prt 0 str])
    Neg expr -> prPrec _i 5 (concatD [doc (showString "-") , prt 6 expr])
    Not expr -> prPrec _i 5 (concatD [doc (showString "!") , prt 6 expr])
    EMul expr0 mulop1 expr2 -> prPrec _i 4 (concatD [prt 4 expr0 , prt 0 mulop1 , prt 5 expr2])
    EAdd expr0 addop1 expr2 -> prPrec _i 3 (concatD [prt 3 expr0 , prt 0 addop1 , prt 4 expr2])
    ERel expr0 relop1 expr2 -> prPrec _i 2 (concatD [prt 2 expr0 , prt 0 relop1 , prt 3 expr2])
    EAnd expr0 expr1 -> prPrec _i 1 (concatD [prt 2 expr0 , doc (showString "&&") , prt 1 expr1])
    EOr expr0 expr1 -> prPrec _i 0 (concatD [prt 1 expr0 , doc (showString "||") , prt 0 expr1])
    TECast type' i -> prPrec _i 6 (concatD [doc (showString "{") , prt 0 type' , doc (showString "}") , doc (showString "(") , prt 0 i , doc (showString ")null")])
    TEVar type' i -> prPrec _i 6 (concatD [doc (showString "{") , prt 0 type' , doc (showString "}") , prt 0 i])
    TEMember type' expr i -> prPrec _i 5 (concatD [doc (showString "{") , prt 0 type' , doc (showString "}") , prt 5 expr , doc (showString ".") , prt 0 i])
    TEConstr type' i -> prPrec _i 6 (concatD [doc (showString "{") , prt 0 type' , doc (showString "}") , doc (showString "new") , prt 0 i])
    TELitInt type' n -> prPrec _i 6 (concatD [doc (showString "{") , prt 0 type' , doc (showString "}") , prt 0 n])
    TELitTrue type' -> prPrec _i 6 (concatD [doc (showString "{") , prt 0 type' , doc (showString "}") , doc (showString "true")])
    TELitFalse type' -> prPrec _i 6 (concatD [doc (showString "{") , prt 0 type' , doc (showString "}") , doc (showString "false")])
    TEMethApp type' expr i exprs -> prPrec _i 5 (concatD [doc (showString "{") , prt 0 type' , doc (showString "}") , prt 5 expr , doc (showString ".") , prt 0 i , doc (showString "(") , prt 0 exprs , doc (showString ")")])
    TEApp type' i exprs -> prPrec _i 6 (concatD [doc (showString "{") , prt 0 type' , doc (showString "}") , prt 0 i , doc (showString "(") , prt 0 exprs , doc (showString ")")])
    TEString type' str -> prPrec _i 6 (concatD [doc (showString "{") , prt 0 type' , doc (showString "}") , prt 0 str])
    TNeg type' expr -> prPrec _i 5 (concatD [doc (showString "{") , prt 0 type' , doc (showString "}") , doc (showString "-") , prt 6 expr])
    TNot type' expr -> prPrec _i 5 (concatD [doc (showString "{") , prt 0 type' , doc (showString "}") , doc (showString "!") , prt 6 expr])
    TEMul type' expr0 mulop1 expr2 -> prPrec _i 4 (concatD [doc (showString "{") , prt 0 type' , doc (showString "}") , prt 4 expr0 , prt 0 mulop1 , prt 5 expr2])
    TEAdd type' expr0 addop1 expr2 -> prPrec _i 3 (concatD [doc (showString "{") , prt 0 type' , doc (showString "}") , prt 3 expr0 , prt 0 addop1 , prt 4 expr2])
    TERel type' expr0 relop1 expr2 -> prPrec _i 2 (concatD [doc (showString "{") , prt 0 type' , doc (showString "}") , prt 2 expr0 , prt 0 relop1 , prt 3 expr2])
    TEAnd type' expr0 expr1 -> prPrec _i 1 (concatD [doc (showString "{") , prt 0 type' , doc (showString "}") , prt 2 expr0 , doc (showString "&&") , prt 1 expr1])
    TEOr type' expr0 expr1 -> prPrec _i 0 (concatD [doc (showString "{") , prt 0 type' , doc (showString "}") , prt 1 expr0 , doc (showString "||") , prt 0 expr1])
    Plus  -> prPrec _i 0 (concatD [doc (showString "+")])
    Minus  -> prPrec _i 0 (concatD [doc (showString "-")])
    Times  -> prPrec _i 0 (concatD [doc (showString "*")])
    Div  -> prPrec _i 0 (concatD [doc (showString "/")])
    Mod  -> prPrec _i 0 (concatD [doc (showString "%")])
    LTH  -> prPrec _i 0 (concatD [doc (showString "<")])
    LE  -> prPrec _i 0 (concatD [doc (showString "<=")])
    GTH  -> prPrec _i 0 (concatD [doc (showString ">")])
    GE  -> prPrec _i 0 (concatD [doc (showString ">=")])
    EQU  -> prPrec _i 0 (concatD [doc (showString "==")])
    NE  -> prPrec _i 0 (concatD [doc (showString "!=")])
    Ident str -> prPrec _i 0 (doc (showString str))

instance Print [TopDef] where
  prt _ es = case es of
   [x] -> (concatD [prt 0 x])
   x:xs -> (concatD [prt 0 x , prt 0 xs])
instance Print [Arg] where
  prt _ es = case es of
   [] -> (concatD [])
   [x] -> (concatD [prt 0 x])
   x:xs -> (concatD [prt 0 x , doc (showString ",") , prt 0 xs])
instance Print [ClsBowel] where
  prt _ es = case es of
   [] -> (concatD [])
   x:xs -> (concatD [prt 0 x , prt 0 xs])
instance Print [Ident] where
  prt _ es = case es of
   [] -> (concatD [])
   [x] -> (concatD [prt 0 x])
   x:xs -> (concatD [prt 0 x , doc (showString ",") , prt 0 xs])
instance Print [Stmt] where
  prt _ es = case es of
   [] -> (concatD [])
   x:xs -> (concatD [prt 0 x , prt 0 xs])
instance Print [Item] where
  prt _ es = case es of
   [x] -> (concatD [prt 0 x])
   x:xs -> (concatD [prt 0 x , doc (showString ",") , prt 0 xs])
instance Print [Type] where
  prt _ es = case es of
   [] -> (concatD [])
   [x] -> (concatD [prt 0 x])
   x:xs -> (concatD [prt 0 x , doc (showString ",") , prt 0 xs])
instance Print [Expr] where
  prt _ es = case es of
   [] -> (concatD [])
   [x] -> (concatD [prt 0 x])
   x:xs -> (concatD [prt 0 x , doc (showString ",") , prt 0 xs])
