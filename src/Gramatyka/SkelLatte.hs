{-# LANGUAGE GADTs #-}
module Gramatyka.SkelLatte where

-- Haskell module generated by the BNF converter

import Gramatyka.AbsLatte
import Gramatyka.ErrM
type Result = Err String

failure :: Show a => a -> Result
failure x = Bad $ "Undefined case: " ++ show x

transTree :: Tree c -> Result
transTree t = case t of
  Prgm topdefs -> failure t
  FnDef type' i args block -> failure t
  ClsDef i clsbowels -> failure t
  ClsExtDef i0 i1 clsbowels2 -> failure t
  Argument type' i -> failure t
  MemberDef type' is -> failure t
  MethodDef type' i args block -> failure t
  Blk stmts -> failure t
  Empty  -> failure t
  BStmt block -> failure t
  Decl type' items -> failure t
  Ass expr0 expr1 -> failure t
  Incr expr -> failure t
  Decr expr -> failure t
  Ret expr -> failure t
  VRet  -> failure t
  Cond expr stmt -> failure t
  CondElse expr stmt0 stmt1 -> failure t
  While expr stmt -> failure t
  SExp expr -> failure t
  NoInit i -> failure t
  Init i expr -> failure t
  Int  -> failure t
  Str  -> failure t
  Bool  -> failure t
  IdentType i -> failure t
  Void  -> failure t
  Fun type' types -> failure t
  ECast i -> failure t
  EVar i -> failure t
  EMember expr i -> failure t
  EConstr i -> failure t
  ELitInt n -> failure t
  ELitTrue  -> failure t
  ELitFalse  -> failure t
  EMethApp expr i exprs -> failure t
  EApp i exprs -> failure t
  EString str -> failure t
  Neg expr -> failure t
  Not expr -> failure t
  EMul expr0 mulop1 expr2 -> failure t
  EAdd expr0 addop1 expr2 -> failure t
  ERel expr0 relop1 expr2 -> failure t
  EAnd expr0 expr1 -> failure t
  EOr expr0 expr1 -> failure t
  TECast type' i -> failure t
  TEVar type' i -> failure t
  TEMember type' expr i -> failure t
  TEConstr type' i -> failure t
  TELitInt type' n -> failure t
  TELitTrue type' -> failure t
  TELitFalse type' -> failure t
  TEMethApp type' expr i exprs -> failure t
  TEApp type' i exprs -> failure t
  TEString type' str -> failure t
  TNeg type' expr -> failure t
  TNot type' expr -> failure t
  TEMul type' expr0 mulop1 expr2 -> failure t
  TEAdd type' expr0 addop1 expr2 -> failure t
  TERel type' expr0 relop1 expr2 -> failure t
  TEAnd type' expr0 expr1 -> failure t
  TEOr type' expr0 expr1 -> failure t
  Plus  -> failure t
  Minus  -> failure t
  Times  -> failure t
  Div  -> failure t
  Mod  -> failure t
  LTH  -> failure t
  LE  -> failure t
  GTH  -> failure t
  GE  -> failure t
  EQU  -> failure t
  NE  -> failure t
  Ident str -> failure t

transProgram :: Program -> Result
transProgram t = case t of
  Prgm topdefs -> failure t

transTopDef :: TopDef -> Result
transTopDef t = case t of
  FnDef type' i args block -> failure t
  ClsDef i clsbowels -> failure t
  ClsExtDef i0 i1 clsbowels2 -> failure t

transArg :: Arg -> Result
transArg t = case t of
  Argument type' i -> failure t

transClsBowel :: ClsBowel -> Result
transClsBowel t = case t of
  MemberDef type' is -> failure t
  MethodDef type' i args block -> failure t

transBlock :: Block -> Result
transBlock t = case t of
  Blk stmts -> failure t

transStmt :: Stmt -> Result
transStmt t = case t of
  Empty  -> failure t
  BStmt block -> failure t
  Decl type' items -> failure t
  Ass expr0 expr1 -> failure t
  Incr expr -> failure t
  Decr expr -> failure t
  Ret expr -> failure t
  VRet  -> failure t
  Cond expr stmt -> failure t
  CondElse expr stmt0 stmt1 -> failure t
  While expr stmt -> failure t
  SExp expr -> failure t

transItem :: Item -> Result
transItem t = case t of
  NoInit i -> failure t
  Init i expr -> failure t

transType :: Type -> Result
transType t = case t of
  Int  -> failure t
  Str  -> failure t
  Bool  -> failure t
  IdentType i -> failure t
  Void  -> failure t
  Fun type' types -> failure t

transExpr :: Expr -> Result
transExpr t = case t of
  ECast i -> failure t
  EVar i -> failure t
  EMember expr i -> failure t
  EConstr i -> failure t
  ELitInt n -> failure t
  ELitTrue  -> failure t
  ELitFalse  -> failure t
  EMethApp expr i exprs -> failure t
  EApp i exprs -> failure t
  EString str -> failure t
  Neg expr -> failure t
  Not expr -> failure t
  EMul expr0 mulop1 expr2 -> failure t
  EAdd expr0 addop1 expr2 -> failure t
  ERel expr0 relop1 expr2 -> failure t
  EAnd expr0 expr1 -> failure t
  EOr expr0 expr1 -> failure t
  TECast type' i -> failure t
  TEVar type' i -> failure t
  TEMember type' expr i -> failure t
  TEConstr type' i -> failure t
  TELitInt type' n -> failure t
  TELitTrue type' -> failure t
  TELitFalse type' -> failure t
  TEMethApp type' expr i exprs -> failure t
  TEApp type' i exprs -> failure t
  TEString type' str -> failure t
  TNeg type' expr -> failure t
  TNot type' expr -> failure t
  TEMul type' expr0 mulop1 expr2 -> failure t
  TEAdd type' expr0 addop1 expr2 -> failure t
  TERel type' expr0 relop1 expr2 -> failure t
  TEAnd type' expr0 expr1 -> failure t
  TEOr type' expr0 expr1 -> failure t

transAddOp :: AddOp -> Result
transAddOp t = case t of
  Plus  -> failure t
  Minus  -> failure t

transMulOp :: MulOp -> Result
transMulOp t = case t of
  Times  -> failure t
  Div  -> failure t
  Mod  -> failure t

transRelOp :: RelOp -> Result
transRelOp t = case t of
  LTH  -> failure t
  LE  -> failure t
  GTH  -> failure t
  GE  -> failure t
  EQU  -> failure t
  NE  -> failure t

transIdent :: Ident -> Result
transIdent t = case t of
  Ident str -> failure t

